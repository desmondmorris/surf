<?php
/**
 * @file
 * Functions to generate makefiles.
 */

/**
 * Generates a drush make file from a list of projects and libraries.
 *
 * Much of this code has been adapted directly from the drush core codebase
 *
 * @param array $projects
 *   List of projects
 * @param string  $core
 *   Core Drupal version.
 * @param string  $api_version
 *   Drush make APi version
 *
 * @return string
 *   Returns makefile as string
 */
function make_generate_makefile_contents($projects = array(), $core = DEFAULT_CORE_VERSION, $api_version = DEFAULT_MAKE_API_VERSION) {
  $header = array();
  $header[] = '; This file was auto-generated by Surf';
  $header['core'] = $core;
  $header['api'] = $api_version;

  $output = '';

  $output .= make_generate_makefile_body($projects, $header);

  return $output;
}

/**
 * Generates a drush make file body from a list of projects.
 *
 * Much of this code has been adapted directly from the drush core codebase
 *
 * @param array $projects
 *   List of projects
 * @param array $output
 *   Store for use output
 *
 * @return string
 *   Returns makefile body as a string
 */
function make_generate_makefile_body($projects, $output = array()) {

  $previous_type = 'core';
  foreach ($projects as $name => $project) {
    $type = (isset($project['type']) && ($project['type'] == 'library')) ? 'libraries' : 'projects';
    if ($previous_type != $project['_type']) {
      $previous_type = $project['_type'];
      $output[] = '; ' . ucfirst($previous_type) . 's';
    }
    unset($project['_type']);
    if (!$project && is_string($name)) {
      $output[] = $type . '[] = "' . $name . '"';
      continue;
    }
    $base = $type . '[' . $name . ']';
    if (isset($project['download']) && is_array($project['download'])) {

      $download_whitelist = array(
        'type', 'url', 'md5', 'request_type', 'data', 'filename', 'subtree',
        'branch', 'revision', 'tag', 'refspec', 'interactive', 'username', 'password',
      );

      foreach ($project['download'] as $key => $pair) {

        if (in_array($key, $download_whitelist)) {
          $output[$base . '[download][$key]'] = $pair;
        }

      }
      unset($project['download']);
    }
    foreach ($project as $key => $value) {
      if (is_array($value)) {
        foreach ($value as $item) {
          $output[$base . '[' . $key . '][]'] = '"' . $item . '"';
        }
      }
      else {
        $output[$base . '[' . $key . ']'] = '"' . $value . '"';
      }
    }
    $output[] = '';
  }
  $string = '';
  foreach ($output as $k => $v) {
    if (!is_numeric($k)) {
      $string .= $k . ' = ' . $v;
    }
    else {
      $string .= $v;
    }
    $string .= "\n";
  }

  return $string;
}
